/**
 * Тесты для nfa.js - НКА и RegexParser
 * Тестируем только невалидные регулярные выражения, которые должны выдавать ошибки
 */

import { NFA } from '../nfa.js';

/**
 * Выполнение одного теста RegexParser
 */
function runSingleTest(testCase) {
    try {
    // Пытаемся создать НКА из невалидного регекса
        NFA.fromRegex(testCase.regex, 'test-style');

        // Если дошли сюда без ошибки - тест провален
        console.log(`\t❌ ${testCase.name}`);
        console.log(`\tРегекс: ${testCase.regex}`);
        console.log('\tОжидалась ошибка, но парсер принял регекс');
        console.log(`\tОписание: ${testCase.description}`);

        return false;
    } catch (error) {
    // Ошибка - это то, что мы ожидали
        console.log(`\t✅ ${testCase.name}`);

        if (testCase.showError) {
            console.log(`\tОшибка: ${error.message}`);
        }

        return true;
    }
}

/**
 * Основная функция запуска всех тестов RegexParser
 */
function runAllNFATests() {
    // Единый массив всех тест-кейсов с невалидными регексами
    const testCases = [
    // ========== НЕЗАКРЫТЫЕ ГРУППЫ ==========
        {
            name: 'Незакрытая группа - простая',
            regex: '(abc',
            description: 'Открывающая скобка без закрывающей',
        },
        {
            name: 'Незакрытая группа - вложенная',
            regex: '((abc)',
            description: 'Вложенная группа с одной незакрытой скобкой',
        },
        {
            name: 'Незакрытая группа - с альтернативой',
            regex: '(a|b',
            description: 'Альтернатива в незакрытой группе',
        },
        {
            name: 'Незакрытая группа - с квантификатором',
            regex: '(a+',
            description: 'Квантификатор в незакрытой группе',
        },
        {
            name: 'Глубоко вложенные незакрытые группы',
            regex: '(((((a',
            description: 'Много уровней вложенности без закрытия',
        },

        // ========== ЛИШНИЕ ЗАКРЫВАЮЩИЕ СКОБКИ ==========
        {
            name: 'Лишняя закрывающая скобка - простая',
            regex: 'abc)',
            description: 'Закрывающая скобка без открывающей',
        },
        {
            name: 'Лишняя закрывающая скобка - после группы',
            regex: '(abc))',
            description: 'Дополнительная закрывающая скобка после корректной группы',
        },
        {
            name: 'Лишняя закрывающая скобка - в начале',
            regex: ')abc',
            description: 'Закрывающая скобка в начале выражения',
        },
        {
            name: 'Множественные лишние скобки',
            regex: 'abc)))',
            description: 'Несколько лишних закрывающих скобок',
        },

        // ========== НЕЗАКРЫТЫЕ СИМВОЛЬНЫЕ КЛАССЫ ==========
        {
            name: 'Незакрытый символьный класс - простой',
            regex: '[abc',
            description: 'Открывающая квадратная скобка без закрывающей',
        },
        {
            name: 'Незакрытый символьный класс - с диапазоном',
            regex: '[a-z',
            description: 'Диапазон в незакрытом классе',
        },
        {
            name: 'Незакрытый символьный класс - отрицательный',
            regex: '[^abc',
            description: 'Отрицательный класс без закрытия',
        },
        {
            name: 'Незакрытый символьный класс - с экранированием',
            regex: '[a\\d',
            description: 'Экранированный символ в незакрытом классе',
        },
        {
            name: 'Незакрытый символьный класс - сложный',
            regex: '[A-Za-z0-9_',
            description: 'Сложный класс без закрытия',
        },

        // ========== НЕКОРРЕКТНЫЕ ДИАПАЗОНЫ ==========
        {
            name: 'Обратный диапазон',
            regex: '[z-a]',
            description: 'Диапазон где начало больше конца',
        },
        {
            name: 'Множественные дефисы',
            regex: '[a--z]',
            description: 'Два дефиса подряд в классе',
        },
        {
            name: 'Диапазон разных типов символов',
            regex: '[a-9]',
            description: 'Диапазон от буквы к цифре',
        },

        // ========== НЕКОРРЕКТНОЕ ЭКРАНИРОВАНИЕ ==========
        {
            name: 'Незавершенное экранирование',
            regex: 'abc\\',
            description: 'Обратный слеш в конце без символа',
        },
        {
            name: 'Незавершенное экранирование в классе',
            regex: '[abc\\]',
            description: 'Обратный слеш в конце символьного класса',
        },

        // ========== ПУСТЫЕ КОНСТРУКЦИИ ==========
        {
            name: 'Пустая группа',
            regex: '()',
            description: 'Группа без содержимого',
        },
        {
            name: 'Пустая альтернатива - в начале',
            regex: '|abc',
            description: 'Альтернатива начинается с пустого варианта',
        },
        {
            name: 'Пустая альтернатива - в конце',
            regex: 'abc|',
            description: 'Альтернатива заканчивается пустым вариантом',
        },
        {
            name: 'Пустая альтернатива - в середине',
            regex: 'a||b',
            description: 'Пустой вариант между альтернативами',
        },
        {
            name: 'Пустая альтернатива в группе',
            regex: '(a|)',
            description: 'Пустая альтернатива внутри группы',
        },
        {
            name: 'Множественные пустые альтернативы',
            regex: '|||',
            description: 'Только символы альтернативы без содержимого',
        },

        // ========== НЕКОРРЕКТНЫЕ КВАНТИФИКАТОРЫ ==========
        {
            name: 'Квантификатор без символа - звездочка',
            regex: '*abc',
            description: 'Звездочка в начале выражения',
        },
        {
            name: 'Квантификатор без символа - плюс',
            regex: '+abc',
            description: 'Плюс в начале выражения',
        },
        {
            name: 'Квантификатор без символа - вопрос',
            regex: '?abc',
            description: 'Вопрос в начале выражения',
        },
        {
            name: 'Двойной квантификатор',
            regex: 'a**',
            description: 'Два квантификатора подряд',
        },
        {
            name: 'Тройной квантификатор',
            regex: 'a+++',
            description: 'Три квантификатора подряд',
        },
        {
            name: 'Смешанные квантификаторы',
            regex: 'a*+',
            description: 'Разные квантификаторы подряд',
        },
        {
            name: 'Квантификатор после альтернативы',
            regex: 'a|*',
            description: 'Квантификатор сразу после символа альтернативы',
        },

        // ========== НЕКОРРЕКТНЫЕ СИМВОЛЬНЫЕ КЛАССЫ ==========
        {
            name: 'Пустой символьный класс',
            regex: '[]',
            description: 'Символьный класс без содержимого',
        },
        {
            name: 'Пустой отрицательный класс',
            regex: '[^]',
            description: 'Отрицательный класс без содержимого',
        },
        {
            name: 'Вложенные квадратные скобки',
            regex: '[[abc]]',
            description: 'Квадратные скобки внутри символьного класса',
        },

        // ========== НЕКОРРЕКТНЫЕ СПЕЦИАЛЬНЫЕ СИМВОЛЫ ==========
        {
            name: 'Одинокий символ альтернативы',
            regex: '|',
            description: 'Только символ альтернативы без вариантов',
        },
        {
            name: 'Альтернатива в начале группы',
            regex: '(|abc)',
            description: 'Группа начинается с альтернативы',
        },
        {
            name: 'Альтернатива в конце группы',
            regex: '(abc|)',
            description: 'Группа заканчивается альтернативой',
        },

        // ========== СЛОЖНЫЕ НЕКОРРЕКТНЫЕ СЛУЧАИ ==========
        {
            name: 'Смешанные ошибки - скобки и классы',
            regex: '(abc[def',
            description: 'Незакрытая группа и незакрытый класс',
        },
        {
            name: 'Смешанные ошибки - квантификаторы и скобки',
            regex: '(*abc)',
            description: 'Квантификатор в начале группы',
        },
        {
            name: 'Смешанные ошибки - экранирование и классы',
            regex: '[abc\\',
            description: 'Незавершенное экранирование в незакрытом классе',
        },
        {
            name: 'Глубоко вложенные ошибки',
            regex: '((([abc)))',
            description: 'Неправильная вложенность групп',
        },
        {
            name: 'Множественные типы ошибок',
            regex: '(abc[def*+',
            description: 'Несколько типов ошибок в одном выражении',
        },

        // ========== ГРАНИЧНЫЕ СЛУЧАИ ==========
        {
            name: 'Очень длинная незакрытая группа',
            regex: `(${'a'.repeat(1000)}`,
            description: 'Длинная строка в незакрытой группе',
        },
        {
            name: 'Много вложенных незакрытых групп',
            regex: `${'('.repeat(100)}a`,
            description: 'Глубокая вложенность без закрытия',
        },
        {
            name: 'Много лишних закрывающих скобок',
            regex: `a${')'.repeat(100)}`,
            description: 'Множество лишних закрывающих скобок',
        },

        // ========== СПЕЦИФИЧЕСКИЕ ОШИБКИ ПАРСЕРА ==========
        {
            name: 'Неожиданный конец после экранирования',
            regex: 'abc\\',
            description: 'Выражение заканчивается обратным слешем',
        },
        {
            name: 'Неожиданный конец в группе',
            regex: '(abc',
            description: 'Выражение заканчивается внутри группы',
        },
        {
            name: 'Неожиданный конец в классе',
            regex: '[abc',
            description: 'Выражение заканчивается внутри символьного класса',
        },
        {
            name: 'Неожиданный конец после альтернативы',
            regex: 'abc|',
            description: 'Выражение заканчивается символом альтернативы',
        },
    ];

    const total = testCases.length;
    console.log(`🚀 ЗАПУСК ВСЕХ ТЕСТОВ REGEXPARSER (НЕВАЛИДНЫЕ РЕГЕКСЫ) (${total} штука):`);

    let passed = 0;

    for (const testCase of testCases) {
        if (runSingleTest(testCase)) {
            passed++;
        }
    }

    const allSuccess = passed === total;

    if (!allSuccess) {
        console.log(`\n${'-'.repeat(80)}`);
        console.log(`❌ Не пройдено: ${total - passed} тестов`);
        process.exit(1);
    }

    return { totalPassed: passed, totalTests: total, success: allSuccess };
}

if (typeof window === 'undefined') {
    runAllNFATests();
}
